---
import BaseLayout from '../../layouts/BaseLayout.astro';
import ProductSale from '../../components/ProductSale.astro';
import CategoryFilter from '../../components/CategoryFilter.svelte';

interface Product {
    slug: string;
    id: string;
    title: string;
    description: string;
    price: number;
    images: { id: string; url: string }[];
    productType: string;
    productWeight: number;
    preOrder: boolean;
    fileGuid: string;
    createdAt: Date;
    sale?: boolean;
    sizes?: string;
    updatedAt?: string;
}

let products: Product[] = [];
let sizes: string[] = [];

try {
    const result = await fetch(import.meta.env.PUBLIC_GRAPHCMS_API, {
        headers: {
            'Content-Type': 'application/json',
        },
        method: 'POST',
        body: JSON.stringify({
            query: `query{
                    products{
                        slug
                        id
                        sale
                        title
                        description
                        price
                        sizes
                        images {
                            id
                            url
                        }
                        productType
                        productWeight
                        preOrder
                        fileGuid
                        createdAt
                        updatedAt
                    }
                }`,
        }),
    });
    if (result.ok) {
        const resultJSON = await result.json();
        products = resultJSON.data.products;

        // Log the raw products data to see what sizes field contains
        products.slice(0, 3).forEach((product, index) => {
            console.log(`Product ${index + 1} - ${product.title}:`, {
                sizes: product.sizes,
                productType: product.productType,
                sale: product.sale,
            });
        });

        // turn createdAt into a date object
        products.forEach((product) => {
            product.createdAt = new Date(product.createdAt);
        });
        products = products.filter((product) => product.sale);
        // sort products by createdAt
        products.sort((a, b) => {
            if (a.productType === 'clothing' && b.productType !== 'clothing') return -1;
            if (b.productType === 'clothing' && a.productType !== 'clothing') return 1;
            return b.createdAt.getTime() - a.createdAt.getTime();
        });

        // Extract unique sizes from all products
        const allSizes = new Set<string>();
        allSizes.add('All');

        // Debug counter for clothing with sizes
        let clothingItemsWithSizes = 0;

        products.forEach((product) => {
            console.log(`Processing sizes for ${product.title}:`, product.sizes);

            if (product.sizes && typeof product.sizes === 'string') {
                clothingItemsWithSizes++;

                // Split sizes by pipe and add each individually
                product.sizes.split('|').forEach((size) => {
                    // Clean up the size
                    const cleanSize = size
                        .trim()
                        .replace('Small', 'Small')
                        .replace('Medium', 'Medium')
                        .replace('Large', 'Large')
                        .replace('XXL', '2XL')
                        .replace('XXXL', '3XL')
                        .replace('triple_xl', '3XL')
                        .replace('double_xl', '2XL');

                    console.log(`  Adding size: ${cleanSize} (from ${size})`);
                    allSizes.add(cleanSize);
                });
            }
        });

        console.log(`Found ${clothingItemsWithSizes} items with size data`);
        console.log('AllSizes set:', allSizes);

        // If we found no sizes (or only "All"), use product types as fallback
        if (allSizes.size <= 1) {
            console.log('No sizes found, falling back to hardcoded sizes');

            // Use hardcoded sizes for clothing items in the correct order
            if (products.some((p) => p.productType === 'clothing')) {
                sizes = ['All', 'Small', 'Medium', 'Large', 'XL', '2XL', '3XL'];
                console.log('Using hardcoded sizes in standard order:', sizes);
            } else {
                // Extract unique categories as fallback
                const productTypes = [
                    'All',
                    ...new Set(products.map((product) => product.productType)),
                ];
                sizes = productTypes;
            }
        } else {
            sizes = Array.from(allSizes).sort((a, b) => {
                if (a === 'All') return -1;
                if (b === 'All') return 1;

                const sizeOrder = {
                    Small: 1,
                    Medium: 2,
                    Large: 3,
                    XL: 4,
                    '2XL': 5,
                    '3XL': 6,
                };

                return (sizeOrder[a] || 99) - (sizeOrder[b] || 99);
            });
        }

        // Debug log to check if sizes are being properly extracted
        console.log('Available sizes:', sizes);
        console.log('Number of sale products:', products.length);
    } else {
        console.log('Error fetching data');
        throw new Error(`${result.status}: ${result.statusText}`);
    }
} catch (error) {
    console.error(error);
}
---

<BaseLayout
    title="Replicant | New Jersey Death Metal"
    desc="Site for the New Jersey based Death Metal band Replicant. Buy some shit!"
>
    <main>
        <div class="text-center bg-primaryColor/5 py-8 sm:py-16 px-2">
            <h1 class="text-3xl sm:text-5xl font-bold tracking-tight text-replicant-100">
                Infinite Exhaustion Summer Tour Merch Blowout
            </h1>
            <p class="mx-auto mt-4 max-w-3xl text-lg text-replicant-300">
                We've returned from our European tour and are clearing out the remaining shirts.
            </p>
            <div class="mt-12">
                <CategoryFilter client:load categories={sizes} />
            </div>
        </div>
        <section class="px-4 mx-auto max-w-7xl lg:px-6 py-4 sm:py-8">
            <div
                id="product-grid"
                class="grid grid-cols-1 mt-6 sm:mt-16 gap-y-12 sm:grid-cols-2 sm:gap-x-10"
            >
                {products.map((product) => <ProductSale product={product} />)}
            </div>
        </section>
    </main>
</BaseLayout>

<script is:inline>
    // Order of sizes for filtering
    const sizeOrder = ['Small', 'Medium', 'Large', 'XL', '2XL', '3XL'];

    function initializeFilter() {
        const productGrid = document.getElementById('product-grid');
        if (!productGrid) {
            console.error('Product grid not found');
            return;
        }
        const products = Array.from(productGrid.children);

        document.addEventListener('categoryChange', (event) => {
            const selectedValue = event.detail.category;
            console.log('Selected filter value:', selectedValue);

            products.forEach((product) => {
                // Always show all products when "All" is selected
                if (selectedValue === 'All') {
                    product.style.display = '';
                    return;
                }

                const productType = product.dataset.productType;
                const productSizes = product.dataset.sizes || '';

                // If it's a clothing item and we're filtering by a size
                if (productType === 'clothing' && sizeOrder.includes(selectedValue)) {
                    // Show if it has that size
                    if (productSizes && productSizes.includes(selectedValue)) {
                        product.style.display = '';
                    } else {
                        product.style.display = 'none';
                    }
                }
                // If we're filtering by product type
                else if (selectedValue === productType) {
                    product.style.display = '';
                } else {
                    product.style.display = 'none';
                }
            });
        });
    }

    // Run the initialization function when the DOM is fully loaded
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeFilter);
    } else {
        initializeFilter();
    }
</script>
