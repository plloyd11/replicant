---
import BaseLayout from '../layouts/BaseLayout.astro';
import Product from '../components/Product.astro';
import CategoryFilter from '../components/CategoryFilter.svelte';
import PromoBanner from '../components/PromoBanner.astro';

import Hero from '../components/homepage/Hero.astro';
import Transmissions from '../components/homepage/Transmissions.astro';
import Emanations from '../components/homepage/Emanations.astro';
import Communications from '../components/homepage/Communications.astro';
import Build from '../components/homepage/Build.astro';

interface Product {
    slug: string;
    id: string;
    title: string;
    description: string;
    price: number;
    images: { id: string; url: string }[];
    productType: string;
    productWeight: number;
    preOrder: boolean;
    fileGuid: string;
    createdAt: Date;
}

interface Review {
    pullQuote: string;
    source: string;
    linkToReview: string;
}

interface Show {
    title: string;
    date: string;
    flyer: { url: string };
    venueName: string;
    venue: { latitude: number; longitude: number };
    description: { html: string };
}

let products: Product[] = [];
let reviews: Review[] = [];
let shows: Show[] = [];
let categories: string[] = [];

try {
    const result = await fetch(import.meta.env.PUBLIC_GRAPHCMS_API, {
        headers: {
            'Content-Type': 'application/json',
        },
        method: 'POST',
        body: JSON.stringify({
            query: `query{
                    products{
                        slug
                        id
                        title
                        description
                        price
                        images {
                            id
                            url
                        }
                        productType
                        productWeight
                        preOrder
                        fileGuid
                        createdAt
                        updatedAt
                    }
                    reviews {
                        pullQuote
                        source
                        linkToReview
                    }
                    shows {
                        title
                        date
                        flyer {
                            url
                        }
                        venueName
                        venue {
                            latitude
                            longitude
                        }
                        description {
                            html
                        }
                    }
                }`,
        }),
    });
    if (result.ok) {
        const resultJSON = await result.json();
        products = resultJSON.data.products;
        reviews = resultJSON.data.reviews;
        shows = resultJSON.data.shows;

        // turn createdAt into a date object
        products.forEach((product) => {
            product.createdAt = new Date(product.createdAt);
        });
        // sort products by createdAt
        products.sort((a, b) => {
            if (a.productType === 'clothing' && b.productType !== 'clothing') return -1;
            if (b.productType === 'clothing' && a.productType !== 'clothing') return 1;
            return b.createdAt.getTime() - a.createdAt.getTime();
        });

        shows.sort((a, b) => {
            return new Date(b.date).getTime() - new Date(a.date).getTime();
        });

        // Extract unique categories
        categories = ['All', ...new Set(products.map((product) => product.productType))];
    } else {
        console.log('Error fetching data');
        throw new Error(`${result.status}: ${result.statusText}`);
    }
} catch (error) {
    console.error(error);
}
---

<BaseLayout
    title="Replicant | New Jersey Death Metal"
    desc="Site for the New Jersey based Death Metal band Replicant. Buy some shit!"
>
    <Hero reviews={reviews[0]} />
    <main class="py-16 space-y-20 lg:space-y-40 lg:py-24">
        <PromoBanner />
        <section id="hardware" class="px-4 mx-auto max-w-7xl lg:px-6 scroll-mt-6 lg:scroll-mt-32">
            <h2 class="section-header !mb-8">Hardware</h2>
            <CategoryFilter client:load categories={categories} />
            <div
                id="product-grid"
                class="grid grid-cols-1 mt-16 gap-y-12 sm:grid-cols-2 sm:gap-x-6 lg:grid-cols-3"
            >
                {products.map((product) => <Product product={product} />)}
            </div>
        </section>
        <section
            id="transmissions"
            class="px-4 mx-auto max-w-7xl lg:px-6 scroll-mt-6 lg:scroll-mt-32"
        >
            <h2 class="section-header">Transmissions</h2>
            <Transmissions />
        </section>
        <section id="emanations" class="px-4 mx-auto max-w-7xl lg:px-6 scroll-mt-6 lg:scroll-mt-32">
            <h2 class="section-header">Emanations</h2>
            <Emanations shows={shows} />
        </section>
        <section
            id="communications"
            class="px-4 mx-auto max-w-7xl lg:px-6 scroll-mt-6 lg:scroll-mt-32"
        >
            <h2 class="section-header">Communications</h2>
            <Communications />
        </section>
        <section id="build" class="px-4 mx-auto max-w-7xl lg:px-6 scroll-mt-6 lg:scroll-mt-32">
            <h2 class="section-header">Build</h2>
            <Build />
        </section>
    </main>
</BaseLayout>

<script is:inline>
    function initializeFilter() {
        const productGrid = document.getElementById('product-grid');
        if (!productGrid) {
            console.error('Product grid not found');
            return;
        }
        const products = Array.from(productGrid.children);

        document.addEventListener('categoryChange', (event) => {
            const selectedCategory = event.detail.category;
            console.log('Selected category:', selectedCategory); // Debug log
            products.forEach((product) => {
                const productType = product.dataset.productType;
                console.log('Product type:', productType); // Debug log
                if (selectedCategory === 'All' || productType === selectedCategory) {
                    product.style.display = '';
                } else {
                    product.style.display = 'none';
                }
            });
        });
    }

    // Run the initialization function when the DOM is fully loaded
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeFilter);
    } else {
        initializeFilter();
    }
</script>
